{"version":3,"sources":["components/Posts/post.js","components/Posts/Posts.js","Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","className","src","photo","alt","name","nickname","date","content","image","postArray","authorImage","authorName","authorNickname","postImage","postContent","postDate","Posts","state","map","post","React","Component","Header","MENU","menuItem","to","path","title","component","exact","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8TAgBgBA,MAdhB,SAAcC,GACV,OACE,yBAAKC,UAAU,eACT,yBAAKA,UAAU,cAAcC,IAAKF,EAAMG,MAAOC,IAAI,WACvD,yBAAKH,UAAU,cACb,0BAAMA,UAAU,cAAcD,EAAMK,MACpC,0BAAMJ,UAAU,kBAAkBD,EAAMM,UACxC,0BAAML,UAAU,QAAQD,EAAMO,OAEhC,yBAAKN,UAAU,eAAeD,EAAMQ,SACpC,yBAAKP,UAAU,eAAeC,IAAKF,EAAMS,MAAOL,IAAI,cCHtDM,EAAY,CACd,CACEC,YAAY,8EACZC,WAAY,gBACZC,eAAgB,cAChBC,UAAW,sEACXC,YAAa,iBACbC,SAAU,YAEZ,CACEL,YACE,+EACFC,WAAY,YACZC,eAAgB,YAChBC,UACE,sEACFC,YAAa,YACbC,SAAU,YAEZ,CACEL,YACE,sEACFC,WAAY,UACZC,eAAgB,OAChBC,UACE,4PACFC,YAAa,kBACbC,SAAU,aA2BCC,E,4MAtBbC,MAAQ,G,uDAGN,OACE,yBAAKjB,UAAU,iBACZS,EAAUS,KAAI,SAACC,GACd,OACE,kBAAC,EAAD,CACEf,KAAMe,EAAKR,WACXT,MAAOiB,EAAKT,YACZL,SAAUc,EAAKP,eACfL,QAASY,EAAKL,YACdN,MAAOW,EAAKN,UACZP,KAAMa,EAAKJ,mB,GAdLK,IAAMC,W,OCzBbC,G,MATF,WACT,OACI,yBAAKtB,UAAU,iBACVuB,EAAKL,KAAI,SAACM,GAAD,OACN,kBAAC,IAAD,CAASC,GAAMD,EAASE,KAAM1B,UAAU,aAAawB,EAASG,aCJjEJ,EAAK,CACd,CACAI,MAAM,QACND,KAAK,SACLE,UAAWZ,EACXa,OAAM,IAeKC,MAXf,WACE,OACE,kBAAC,IAAD,KACA,6BACE,kBAAE,EAAF,MACA,kBAAE,EAAF,S,MCRcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEI,kBAAC,EAAD,OAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0d8ad12d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./post.css\";\r\nfunction Post(props) {\r\n    return (\r\n      <div className=\"postWrapper\">\r\n            <img className=\"authorImage\" src={props.photo} alt='author' />\r\n        <div className=\"authorInfo\">\r\n          <span className=\"authorName\">{props.name}</span>\r\n          <span className=\"authorNickname\">{props.nickname}</span>\r\n          <span className=\"date\">{props.date}</span>\r\n        </div>\r\n        <div className=\"contentText\">{props.content}</div>\r\n        <img className=\"contentImage\" src={props.image} alt='content' />\r\n      </div>\r\n    );\r\n  }\r\n export default Post;","import React from \"react\";\r\nimport Post from \"./post\";\r\n// import {connect} from \"react-redux\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst postArray = [\r\n    {\r\n      authorImage:\"https://cdn.pixabay.com/photo/2020/09/09/13/03/bike-riding-5557589__340.png\",\r\n      authorName: \"Mariia Mytsko\",\r\n      authorNickname: \"@Mariia_Myt\",\r\n      postImage: \"https://cdn.pixabay.com/photo/2019/06/06/20/16/cat-4256821_1280.jpg\",\r\n      postContent: \"I like cats :)\",\r\n      postDate: \"25 Sept.\",\r\n    },\r\n    {\r\n      authorImage:\r\n        \"https://cdn.pixabay.com/photo/2020/05/09/13/29/photographer-5149664__340.jpg\",\r\n      authorName: \"Who Knows\",\r\n      authorNickname: \"@some-one\",\r\n      postImage:\r\n        \"https://cdn.pixabay.com/photo/2020/02/11/22/40/sea-4841142__340.jpg\",\r\n      postContent: \"Sea power\",\r\n      postDate: \"27 Sept.\",\r\n    },\r\n    {\r\n      authorImage:\r\n        \"https://cdn.pixabay.com/photo/2020/09/17/13/59/cat-5579221__340.jpg\",\r\n      authorName: \"Shelena\",\r\n      authorNickname: \"@cat\",\r\n      postImage:\r\n        \"https://cdn-a.william-reed.com/var/wrbm_gb_food_pharma/storage/images/publications/food-beverage-nutrition/globalmeatnews.com/headlines/livestock/red-meat-report-slammed-by-industry/9038653-1-eng-GB/Red-meat-report-slammed-by-industry_wrbm_large.jpg\",\r\n      postContent: \"Is that for me?\",\r\n      postDate: \"27 Sept.\",\r\n    },\r\n  ];\r\n  \r\n  class Posts extends React.Component {\r\n    state = {};\r\n  \r\n    render() {\r\n      return (\r\n        <div className=\"posts-wrapper\">\r\n          {postArray.map((post) => {\r\n            return (\r\n              <Post\r\n                name={post.authorName}\r\n                photo={post.authorImage}\r\n                nickname={post.authorNickname}\r\n                content={post.postContent}\r\n                image={post.postImage}\r\n                date={post.postDate}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default Posts;","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport {MENU} from \"../App\";\r\nimport \"./Header.css\";\r\n\r\nconst Header=()=>{\r\n    return(\r\n        <div className=\"headerWrapper\" >\r\n            {MENU.map((menuItem)=>(\r\n                <NavLink to = {menuItem.path} className=\"menuTitle\">{menuItem.title}</NavLink>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\nexport default Header;","import React from 'react';\r\nimport './App.css';\r\nimport Posts from \"./components/Posts/Posts\";\r\nimport Header from \"./Header/Header\";\r\nimport {HashRouter as Router} from \"react-router-dom\"\r\n\r\nexport const MENU=[\r\n    {\r\n    title:\"Posts\",\r\n    path:\"/posts\",\r\n    component: Posts,\r\n    exact:true\r\n  },\r\n]\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n    <div >\r\n      < Header />\r\n      < Posts />\r\n    </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n  \r\n      <App />\r\n   \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}